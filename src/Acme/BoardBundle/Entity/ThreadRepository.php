<?php

namespace Acme\BoardBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Acme\UserBundle\Entity\User;

/**
 * ThreadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ThreadRepository extends EntityRepository
{
    public function create(User $user, Thread $thread)
    {
        $em = $this->getEntityManager();
        
        $thread->setUser($user);
             
        $module = $thread->getModule();
        $module->setNumThreads($module->getNumThreads() + 1);
     
        $comment = new Comment();
        $comment->setUser($user)
            ->setContent($thread->getContent());
                
        $thread->addComment($comment);
        $thread->setLastComment($comment);
        
        $em->persist($module);
        $em->persist($thread);                    
        $em->persist($comment);
        $em->flush();                 
    }
    
    public function pagination(Module $module, $page, $pageSize)
    {
        $em = $this->getEntityManager();
        
        $dql = "SELECT t FROM AcmeBoardBundle:Thread t
            WHERE t.module = :module ORDER BY t.updatedAt DESC";
        $query = $em->createQuery($dql)
            ->setParameter('module', $module->getId())
            ->setFirstResult(($page - 1) * $pageSize)
            ->setMaxResults($pageSize);
            
        return $query;
    }
    
    public function count(Module $module)
    {
        $em = $this->getEntityManager();
        
        $dql = "SELECT COUNT(t) FROM AcmeBoardBundle:Thread t
            WHERE t.module = :module";
        $query = $em->createQuery($dql)
            ->setParameter('module', $module->getId());
        
        return $query->getSingleScalarResult();
    }
    
    public function paginationByUser($user, $page, $pageSize, $interval)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT t FROM AcmeBoardBundle:Thread t 
            WHERE t.user = :user AND t.updatedAt > :interval
            ORDER BY t.id DESC";
        $query = $em->createQuery($dql)
            ->setParameter('user', $user)
            ->setParameter('interval', strtotime($interval))            
            ->setFirstResult(($page - 1) * $pageSize)
            ->setMaxResults($pageSize);
            
        return $query;
    }
    
    public function countByUser($user, $interval)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT COUNT(t) FROM AcmeBoardBundle:Thread t 
        WHERE t.user = :user AND t.updatedAt > :interval";
        $query = $em->createQuery($dql)
            ->setParameter('user', $user)
            ->setParameter('interval', strtotime($interval));
            
        return $query->getSingleScalarResult();  
    }
}
